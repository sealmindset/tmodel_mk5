<%- include('partials/header', { pageTitle: 'All Threat Models - Threat Model Generator', active: 'models', extraCss: [] }) %>

<div class="container mt-4">
  <div class="d-flex justify-content-between align-items-center mb-4">
    <h1 class="mb-0">All Threat Models</h1>
    <div class="btn-group">
      <a href="/create" class="btn btn-primary">
        <i class="bi bi-plus-circle me-1"></i>Create New Threat Model
      </a>
      <button type="button" class="btn btn-outline-secondary" id="refreshModels">
        <i class="bi bi-arrow-repeat me-1"></i>Refresh
      </button>
    </div>
  </div>
  
  <!-- Toast container for notifications -->
  <div id="toastContainer" class="toast-container position-fixed bottom-0 end-0 p-3"></div>

  <!-- Search and Bulk Actions Row -->
  <div class="row mb-3">
    <div class="col-md-6">
      <div class="input-group">
        <input type="text" class="form-control" id="searchModels" placeholder="Search models...">
        <button class="btn btn-outline-primary" type="button" id="searchButton">
          <i class="bi bi-search"></i>
        </button>
      </div>
    </div>
    <div class="col-md-6 text-md-end">
      <div class="btn-group">
        <button type="button" class="btn btn-outline-danger" id="deleteSelectedBtn" disabled>
          <i class="bi bi-trash me-1"></i>Delete Selected
        </button>
        <button type="button" class="btn btn-outline-secondary dropdown-toggle" data-bs-toggle="dropdown">
          <i class="bi bi-gear me-1"></i>Actions
        </button>
        <ul class="dropdown-menu dropdown-menu-end">
          <li><button class="dropdown-item" type="button" id="selectAllBtn"><i class="bi bi-check-all me-2"></i>Select All</button></li>
          <li><button class="dropdown-item" type="button" id="deselectAllBtn"><i class="bi bi-x-lg me-2"></i>Deselect All</button></li>
          <li><hr class="dropdown-divider"></li>
          <li><button class="dropdown-item" type="button" id="exportSelectedBtn"><i class="bi bi-download me-2"></i>Export Selected</button></li>
        </ul>
      </div>
    </div>
  </div>

  <!-- Models Table -->
  <div class="card shadow-sm">
    <div class="card-body p-0">
      <% if (subjects && subjects.length > 0) { %>
        <div class="table-responsive">
          <table class="table table-hover mb-0" id="threat-models-table">
            <thead class="table-light">
              <tr>
                <th width="40">
                  <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="selectAll">
                  </div>
                </th>
                <th>Title</th>
                <th>Threats</th>
                <th>Model</th>
                <th>Created</th>
                <th width="180">Actions</th>
              </tr>
            </thead>
            <tbody>
              <% subjects.forEach(subject => { %>
                <tr data-id="<%= subject.subjectid %>">
                  <td>
                    <div class="form-check">
                      <input class="form-check-input subject-checkbox" type="checkbox" value="<%= subject.subjectid %>">
                    </div>
                  </td>
                  <td class="fw-medium"><%= subject.title %></td>
                  <td><%= subject.threatCount || 0 %></td>
                  <td><%= subject.model %></td>
                  <td><%= new Date(subject.createdAt).toLocaleDateString() %></td>
                  <td>
                    <div class="btn-group" role="group">
                      <a href="/results?subjectid=<%= subject.subjectid %>" class="btn btn-sm btn-outline-primary" title="View">
                        <i class="bi bi-eye"></i>
                      </a>
                      <button type="button" class="btn btn-sm btn-outline-secondary" onclick="showSummaryPromptModal('<%= subject.subjectid %>')" title="Generate Summary">
                        <i class="bi bi-file-earmark-text"></i>
                      </button>
                      <button type="button" class="btn btn-sm btn-outline-success" onclick="location.href='/analyze-threats/<%= subject.subjectid %>'" title="Analyze Threats">
                        <i class="bi bi-graph-up"></i>
                      </button>
                      <button type="button" class="btn btn-sm btn-outline-danger" onclick="confirmDelete('<%= subject.subjectid %>', '<%= subject.title %>')" title="Delete">
                        <i class="bi bi-trash"></i>
                      </button>
                    </div>
                  </td>
                </tr>
              <% }); %>
            </tbody>
          </table>
        </div>
      <% } else { %>
        <div class="alert alert-info m-3">
          <i class="bi bi-info-circle me-2"></i>No threat models found. <a href="/create" class="alert-link">Create your first threat model</a>.
        </div>
      <% } %>
    </div>
  </div>
</div>

<!-- Deletion Confirmation Modal -->
<div class="modal fade" id="confirmModal" tabindex="-1" aria-labelledby="confirmModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="confirmModalLabel">Confirm Deletion</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body" id="confirmModalBody">
        Are you sure you want to delete this threat model?
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-danger" id="confirmDeleteBtn">Delete</button>
      </div>
    </div>
  </div>
</div>

<!-- JavaScript for the models page -->
<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Handle refresh button
    document.getElementById('refreshModels').addEventListener('click', function() {
      location.reload();
    });

    // Handle search
    document.getElementById('searchButton').addEventListener('click', performSearch);
    document.getElementById('searchModels').addEventListener('keypress', function(e) {
      if (e.key === 'Enter') {
        performSearch();
      }
    });

    function performSearch() {
      const searchTerm = document.getElementById('searchModels').value.toLowerCase();
      const tableRows = document.querySelectorAll('#threat-models-table tbody tr');
      
      tableRows.forEach(row => {
        const titleCell = row.querySelector('td:nth-child(2)');
        const title = titleCell.textContent.toLowerCase();
        
        if (title.includes(searchTerm)) {
          row.style.display = '';
        } else {
          row.style.display = 'none';
        }
      });
    }
    
    // Handle select all checkbox
    document.getElementById('selectAll').addEventListener('change', function() {
      const checkboxes = document.querySelectorAll('.subject-checkbox');
      checkboxes.forEach(checkbox => {
        checkbox.checked = this.checked;
      });
      updateDeleteButtonState();
    });
    
    // Handle individual checkboxes
    document.querySelectorAll('.subject-checkbox').forEach(checkbox => {
      checkbox.addEventListener('change', updateDeleteButtonState);
    });
    
    // Handle select all/deselect all buttons
    document.getElementById('selectAllBtn').addEventListener('click', function() {
      const checkboxes = document.querySelectorAll('.subject-checkbox');
      checkboxes.forEach(checkbox => {
        checkbox.checked = true;
      });
      document.getElementById('selectAll').checked = true;
      updateDeleteButtonState();
    });
    
    document.getElementById('deselectAllBtn').addEventListener('click', function() {
      const checkboxes = document.querySelectorAll('.subject-checkbox');
      checkboxes.forEach(checkbox => {
        checkbox.checked = false;
      });
      document.getElementById('selectAll').checked = false;
      updateDeleteButtonState();
    });
    
    // Handle delete selected button
    document.getElementById('deleteSelectedBtn').addEventListener('click', function() {
      const selectedIds = Array.from(document.querySelectorAll('.subject-checkbox:checked'))
        .map(checkbox => checkbox.value);
      
      if (selectedIds.length > 0) {
        const modalBody = document.getElementById('confirmModalBody');
        modalBody.textContent = `Are you sure you want to delete ${selectedIds.length} threat model(s)? This action cannot be undone.`;
        
        const confirmModal = new bootstrap.Modal(document.getElementById('confirmModal'));
        confirmModal.show();
        
        document.getElementById('confirmDeleteBtn').onclick = function() {
          deleteSelectedSubjects(selectedIds);
          confirmModal.hide();
        };
      }
    });
    
    // Update delete button state
    function updateDeleteButtonState() {
      const selectedCount = document.querySelectorAll('.subject-checkbox:checked').length;
      const deleteBtn = document.getElementById('deleteSelectedBtn');
      deleteBtn.disabled = selectedCount === 0;
      deleteBtn.innerHTML = `<i class="bi bi-trash me-1"></i>Delete Selected ${selectedCount > 0 ? `(${selectedCount})` : ''}`;
    }
    
    // Delete selected subjects
    function deleteSelectedSubjects(subjectIds) {
      fetch('/delete-subjects', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ subjectsToDelete: subjectIds })
      })
      .then(response => {
        if (response.ok) {
          showToast('Success', 'Threat models deleted successfully', 'success');
          // Remove deleted rows from table
          subjectIds.forEach(id => {
            const row = document.querySelector(`tr[data-id="${id}"]`);
            if (row) row.remove();
          });
          // Update UI if table is now empty
          if (document.querySelectorAll('#threat-models-table tbody tr').length === 0) {
            document.querySelector('.table-responsive').innerHTML = `
              <div class="alert alert-info m-3">
                <i class="bi bi-info-circle me-2"></i>No threat models found. <a href="/create" class="alert-link">Create your first threat model</a>.
              </div>
            `;
          }
          updateDeleteButtonState();
        } else {
          showToast('Error', 'Failed to delete threat models', 'danger');
        }
      })
      .catch(error => {
        console.error('Error:', error);
        showToast('Error', 'An error occurred while deleting threat models', 'danger');
      });
    }
  });

  // Confirm deletion of a single threat model
  function confirmDelete(subjectId, title) {
    const modalBody = document.getElementById('confirmModalBody');
    modalBody.textContent = `Are you sure you want to delete "${title}"? This action cannot be undone.`;
    
    const confirmModal = new bootstrap.Modal(document.getElementById('confirmModal'));
    confirmModal.show();
    
    document.getElementById('confirmDeleteBtn').onclick = function() {
      deleteSingleSubject(subjectId);
      confirmModal.hide();
    };
  }
  
  // Delete a single subject
  function deleteSingleSubject(subjectId) {
    fetch('/delete-subjects', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ subjectsToDelete: [subjectId] })
    })
    .then(response => {
      if (response.ok) {
        showToast('Success', 'Threat model deleted successfully', 'success');
        const row = document.querySelector(`tr[data-id="${subjectId}"]`);
        if (row) row.remove();
        
        // Update UI if table is now empty
        if (document.querySelectorAll('#threat-models-table tbody tr').length === 0) {
          document.querySelector('.card-body').innerHTML = `
            <div class="alert alert-info m-3">
              <i class="bi bi-info-circle me-2"></i>No threat models found. <a href="/create" class="alert-link">Create your first threat model</a>.
            </div>
          `;
        }
      } else {
        showToast('Error', 'Failed to delete threat model', 'danger');
      }
    })
    .catch(error => {
      console.error('Error:', error);
      showToast('Error', 'An error occurred while deleting the threat model', 'danger');
    });
  }
  
  // Show toast notification
  function showToast(title, message, type = 'info') {
    const toastContainer = document.getElementById('toastContainer');
    const id = 'toast-' + Date.now();
    
    const toastHTML = `
      <div id="${id}" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header bg-${type} text-white">
          <strong class="me-auto">${title}</strong>
          <small>Just now</small>
          <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
        <div class="toast-body">
          ${message}
        </div>
      </div>
    `;
    
    toastContainer.insertAdjacentHTML('beforeend', toastHTML);
    const toastElement = document.getElementById(id);
    const toast = new bootstrap.Toast(toastElement, { delay: 5000 });
    toast.show();
    
    // Remove toast from DOM after it's hidden
    toastElement.addEventListener('hidden.bs.toast', function() {
      toastElement.remove();
    });
  }
  
  // Show summary prompt modal
  function showSummaryPromptModal(subjectId) {
    // This function would be implemented to show a modal for generating a summary
    // It depends on having the appropriate modal HTML structure
    // For now, redirect to a summary generation page
    window.location.href = `/generate-summary?subjectid=${subjectId}`;
  }
</script>

<%- include('partials/footer', { extraJs: [] }) %>
